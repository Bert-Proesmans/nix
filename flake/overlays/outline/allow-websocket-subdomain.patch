diff --git a/server/services/websockets.ts b/server/services/websockets.ts
index 9b45433..a669a85 100644
--- a/server/services/websockets.ts
+++ b/server/services/websockets.ts
@@ -31,6 +31,9 @@ export default function init(
 ) {
   const path = "/realtime";
 
+  const baseHost = new URL(env.URL).hostname;
+  const escapedBaseHost = baseHost.replace(/\./g, "\\.");
+
   // Websockets for events and non-collaborative documents
   const io = new IO.Server(server, {
     path,
@@ -40,7 +43,11 @@ export default function init(
     pingTimeout: 30000,
     cors: {
       // Included for completeness, though CORS does not apply to websocket transport.
-      origin: env.isCloudHosted ? "*" : env.URL,
+      // REF, https://github.com/expressjs/cors?tab=readme-ov-file#configuration-options
+      origin: env.isCloudHosted ? "*" : [
+        env.URL,
+        new RegExp(`\\.${escapedBaseHost}$`, "i"), // any subdomain
+      ],
       methods: ["GET", "POST"],
     },
   });
@@ -64,12 +71,24 @@ export default function init(
       if (req.url?.startsWith(path) && ioHandleUpgrade) {
         // For on-premise deployments, ensure the websocket origin matches the deployed URL.
         // In cloud-hosted we support any origin for custom domains.
-        if (
-          !env.isCloudHosted &&
-          (!req.headers.origin || !env.URL.startsWith(req.headers.origin))
-        ) {
-          socket.end(`HTTP/1.1 400 Bad Request\r\n`);
-          return;
+        if (!env.isCloudHosted) {
+          try {
+            const originHost = new URL(req.headers.origin).hostname;
+            const baseHost = new URL(env.URL).hostname;
+            // exact match OR subdomain match
+            if (
+              originHost === baseHost ||
+              originHost.endsWith("." + baseHost)
+            ) {
+              // Allowed
+            } else {
+              socket.end(`HTTP/1.1 400 Bad Request\r\n`);
+              return;
+            }
+          } catch {
+            socket.end(`HTTP/1.1 400 Bad Request\r\n`);
+            return;
+          }
         }
 
         ioHandleUpgrade(req, socket, head);
